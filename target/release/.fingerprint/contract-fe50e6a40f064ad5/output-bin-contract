{"message":"cannot find value `token_holder` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3474,"byte_end":3486,"line_start":142,"line_end":142,"column_start":27,"column_end":39,"is_primary":true,"text":[{"text":"    set_key(&balance_key(&token_holder),get_key::<U256>(&balance_key(&token_holder)).saturating_sub(amount));","highlight_start":27,"highlight_end":39}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `token_holder` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/utils/helper_methods.rs:142:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    set_key(&balance_key(&token_holder),get_key::<U256>(&balance_key(&token_holder)).saturating_sub(amount));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `token_holder` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3518,"byte_end":3530,"line_start":142,"line_end":142,"column_start":71,"column_end":83,"is_primary":true,"text":[{"text":"    set_key(&balance_key(&token_holder),get_key::<U256>(&balance_key(&token_holder)).saturating_sub(amount));","highlight_start":71,"highlight_end":83}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `token_holder` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/utils/helper_methods.rs:142:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    set_key(&balance_key(&token_holder),get_key::<U256>(&balance_key(&token_holder)).saturating_sub(amount));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `account` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"contract/src/main.rs","byte_start":5783,"byte_end":5790,"line_start":262,"line_end":262,"column_start":49,"column_end":56,"is_primary":true,"text":[{"text":"     if _is_operator_for(runtime::get_caller(), account) {","highlight_start":49,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"contract/src/main.rs","byte_start":5783,"byte_end":5790,"line_start":262,"line_end":262,"column_start":49,"column_end":56,"is_primary":true,"text":[{"text":"     if _is_operator_for(runtime::get_caller(), account) {","highlight_start":49,"highlight_end":56}],"label":null,"suggested_replacement":"amount","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `account` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/main.rs:262:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     if _is_operator_for(runtime::get_caller(), account) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `amount`\u001b[0m\n\n"}
{"message":"cannot find value `account` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"contract/src/main.rs","byte_start":6326,"byte_end":6333,"line_start":282,"line_end":282,"column_start":48,"column_end":55,"is_primary":true,"text":[{"text":"    if _is_operator_for(runtime::get_caller(), account) {","highlight_start":48,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"contract/src/main.rs","byte_start":6326,"byte_end":6333,"line_start":282,"line_end":282,"column_start":48,"column_end":55,"is_primary":true,"text":[{"text":"    if _is_operator_for(runtime::get_caller(), account) {","highlight_start":48,"highlight_end":55}],"label":null,"suggested_replacement":"amount","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `account` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/main.rs:282:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if _is_operator_for(runtime::get_caller(), account) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `amount`\u001b[0m\n\n"}
{"message":"invalid `crate_type` value","code":{"code":"unknown_crate_types","explanation":null},"level":"error","spans":[{"file_name":"contract/src/main.rs","byte_start":63,"byte_end":93,"line_start":3,"line_end":3,"column_start":18,"column_end":48,"is_primary":true,"text":[{"text":"    crate_type = \"target arch should be wasm32\"","highlight_start":18,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[deny(unknown_crate_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: invalid `crate_type` value\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/main.rs:3:18\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    crate_type = \"target arch should be wasm32\"\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[deny(unknown_crate_types)]` on by default\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contract/src/main.rs","byte_start":4105,"byte_end":4122,"line_start":189,"line_end":189,"column_start":47,"column_end":64,"is_primary":true,"text":[{"text":"    _approve(spender, holder, get_key::<U256>(current_allowance).saturating_sub(amount));","highlight_start":47,"highlight_end":64}],"label":"expected `&str`, found struct `casper_types::U256`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/main.rs:189:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    _approve(spender, holder, get_key::<U256>(current_allowance).saturating_sub(amount));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&str`, found struct `casper_types::U256`\u001b[0m\n\n"}
{"message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contract/src/main.rs","byte_start":5049,"byte_end":5070,"line_start":232,"line_end":232,"column_start":11,"column_end":32,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, Vec::new());","highlight_start":11,"highlight_end":32}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5072,"byte_end":5074,"line_start":232,"line_end":232,"column_start":34,"column_end":36,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, Vec::new());","highlight_start":34,"highlight_end":36}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5076,"byte_end":5082,"line_start":232,"line_end":232,"column_start":38,"column_end":44,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, Vec::new());","highlight_start":38,"highlight_end":44}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5084,"byte_end":5088,"line_start":232,"line_end":232,"column_start":46,"column_end":50,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, Vec::new());","highlight_start":46,"highlight_end":50}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5090,"byte_end":5100,"line_start":232,"line_end":232,"column_start":52,"column_end":62,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, Vec::new());","highlight_start":52,"highlight_end":62}],"label":"supplied 5 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5043,"byte_end":5048,"line_start":232,"line_end":232,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, Vec::new());","highlight_start":5,"highlight_end":10}],"label":"expected 6 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3575,"byte_end":3592,"line_start":146,"line_end":146,"column_start":14,"column_end":31,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":14,"highlight_end":31}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3594,"byte_end":3609,"line_start":146,"line_end":146,"column_start":33,"column_end":48,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":33,"highlight_end":48}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3611,"byte_end":3623,"line_start":146,"line_end":146,"column_start":50,"column_end":62,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":50,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3625,"byte_end":3639,"line_start":146,"line_end":146,"column_start":64,"column_end":78,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":64,"highlight_end":78}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3641,"byte_end":3664,"line_start":146,"line_end":146,"column_start":80,"column_end":103,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":80,"highlight_end":103}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3666,"byte_end":3693,"line_start":146,"line_end":146,"column_start":105,"column_end":132,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":105,"highlight_end":132}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3569,"byte_end":3574,"line_start":146,"line_end":146,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/main.rs:232:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    _send(runtime::get_caller(), to, amount, data, Vec::new());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 5 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 6 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/utils/helper_methods.rs:146:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\n\n"}
{"message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contract/src/main.rs","byte_start":5895,"byte_end":5916,"line_start":268,"line_end":268,"column_start":11,"column_end":32,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, operator_data);","highlight_start":11,"highlight_end":32}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5918,"byte_end":5920,"line_start":268,"line_end":268,"column_start":34,"column_end":36,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, operator_data);","highlight_start":34,"highlight_end":36}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5922,"byte_end":5928,"line_start":268,"line_end":268,"column_start":38,"column_end":44,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, operator_data);","highlight_start":38,"highlight_end":44}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5930,"byte_end":5934,"line_start":268,"line_end":268,"column_start":46,"column_end":50,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, operator_data);","highlight_start":46,"highlight_end":50}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5936,"byte_end":5949,"line_start":268,"line_end":268,"column_start":52,"column_end":65,"is_primary":false,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, operator_data);","highlight_start":52,"highlight_end":65}],"label":"supplied 5 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/main.rs","byte_start":5889,"byte_end":5894,"line_start":268,"line_end":268,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    _send(runtime::get_caller(), to, amount, data, operator_data);","highlight_start":5,"highlight_end":10}],"label":"expected 6 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3575,"byte_end":3592,"line_start":146,"line_end":146,"column_start":14,"column_end":31,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":14,"highlight_end":31}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3594,"byte_end":3609,"line_start":146,"line_end":146,"column_start":33,"column_end":48,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":33,"highlight_end":48}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3611,"byte_end":3623,"line_start":146,"line_end":146,"column_start":50,"column_end":62,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":50,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3625,"byte_end":3639,"line_start":146,"line_end":146,"column_start":64,"column_end":78,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":64,"highlight_end":78}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3641,"byte_end":3664,"line_start":146,"line_end":146,"column_start":80,"column_end":103,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":80,"highlight_end":103}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3666,"byte_end":3693,"line_start":146,"line_end":146,"column_start":105,"column_end":132,"is_primary":false,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":105,"highlight_end":132}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/helper_methods.rs","byte_start":3569,"byte_end":3574,"line_start":146,"line_end":146,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"pub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/main.rs:268:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    _send(runtime::get_caller(), to, amount, data, operator_data);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 5 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 6 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/utils/helper_methods.rs:146:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn _send(from: AccountHash, to: AccountHash, amount: U256, _data: Vec<u8>, _operator_data: Vec<u8>, require_reception_ack: bool) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contract/src/utils/mappings.rs","byte_start":549,"byte_end":555,"line_start":39,"line_end":39,"column_start":37,"column_end":43,"is_primary":true,"text":[{"text":"pub fn owner_key(token_id: U256) -> String {","highlight_start":37,"highlight_end":43}],"label":"expected struct `std::string::String`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/mappings.rs","byte_start":520,"byte_end":529,"line_start":39,"line_end":39,"column_start":8,"column_end":17,"is_primary":false,"text":[{"text":"pub fn owner_key(token_id: U256) -> String {","highlight_start":8,"highlight_end":17}],"label":"implicitly returns `()` as its body has no tail or `return` expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing this semicolon","code":null,"level":"help","spans":[{"file_name":"contract/src/utils/mappings.rs","byte_start":591,"byte_end":592,"line_start":40,"line_end":40,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"    format!(\"_owner_{}\",token_id);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/utils/mappings.rs:39:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn owner_key(token_id: U256) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimplicitly returns `()` as its body has no tail or `return` expression\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    format!(\"_owner_{}\",token_id);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider removing this semicolon\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contract/src/utils/mappings.rs","byte_start":866,"byte_end":987,"line_start":50,"line_end":53,"column_start":24,"column_end":10,"is_primary":true,"text":[{"text":"        Some(value) => {","highlight_start":24,"highlight_end":25},{"text":"            let key = value.try_into().unwrap_or_revert();","highlight_start":1,"highlight_end":59},{"text":"            storage::read(key).unwrap_or_revert();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected type parameter `T`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contract/src/utils/mappings.rs","byte_start":719,"byte_end":720,"line_start":47,"line_end":47,"column_start":16,"column_end":17,"is_primary":false,"text":[{"text":"pub fn get_key<T: FromBytes + CLTyped + Default>(name: &str) -> T {","highlight_start":16,"highlight_end":17}],"label":"this type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected type parameter `T`\n        found unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontract/src/utils/mappings.rs:50:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub fn get_key<T: FromBytes + CLTyped + Default>(name: &str) -> T {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        Some(value) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let key = value.try_into().unwrap_or_revert();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            storage::read(key).unwrap_or_revert();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `T`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected type parameter `\u001b[0m\u001b[0m\u001b[1mT\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                   found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 10 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0308, E0425.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0308, E0425.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
